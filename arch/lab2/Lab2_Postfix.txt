=================
Chris Fenton
CSF - Arch
Lab 2
=================

2. Give a postfix expression for the infix expression a + b. Also give a postfix expression for the infix expression (a + b). Hint: In postfix notation for expressions you don't need parentheses. Draw the expression tree for a + b.

a + b -> a b +
(a + b) -> a b +
   +
  / \
 a   b

3. Give a postfix expression for computing the average of two numbers a and b.

a b + 2 /

4. Give a postfix expression for computing the average of three numbers, a, b, and c. Draw the expression tree.

a b + c + 3 /

      รท
     / \
    +   3
   / \
  +   c
 / \
a   b

5. Now give a postfix expression for computing the expression (a+b)*(c+d).

a b + c d + *

6. Translate the following postfix expression to infix: a b + c d - *. Draw the expression tree.

(a + b) * (c - d)

     *
   /    \
  +      -
 / \    / \
a   b  c   d

7. Translate (but do not simplify) the following postfix expression to infix: a b - a + c d e * + / f * . Draw the expression tree.

((a - b) + a) / (c + (d * e)) * f

          *
         / \
        รท   f
       / \
      /   \
     /     \
    +       +
   / \     / \
  -   a   *   c
 / \     / \
a   b   d   e

8. Code the following postfix expression as a code fragment in Jasmin: 28 30 + 14 15 - *.

ldc 28
ldc 30
iadd
ldc 14
ldc 15
isub
imul

9. Now code a jasmin program called Lab2_Postfix.j for the postfix expression in the previous exercise. Have your program print the answer to the console terminal.

.method public static main([Ljava.lang.String;)V
  .limit stack 2000

  ; push System.out onto the stack
  getstatic  java/lang/System/out Ljava/io/PrintStream;

  ; push push our calculation on the stack
  ldc 28
  ldc 30
  iadd
  ldc 14
  ldc 15
  isub
  imul

  ; push System.out onto the stack


  ; call PrintStream.println()
  invokevirtual java/io/PrintStream/println(I)V
  return
.end method

