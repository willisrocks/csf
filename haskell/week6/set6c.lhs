In class

;;;;;;;;;;;;;;;;;;;
Folds
;;;;;;;;;;;;;;;;;;;

Do as many of these as you can. You want to get "fold" into your head.

1. Using the higher-order function foldr define a function sumsq which takes an integer n as its argument and returns the sum of the squares of the first n integers. That is to say,
sumsq n = 12 + 22 + 32 + . . . + n^2
Do not use the function map.

> sumsq n = foldl (+) 0 xs where
>   xs = map (^2) [1..n]

If I'm not allowed to use map to build my list, then I'll use list comprehension

> sumsq' n = foldl (+) 0 xs where
>   xs = [x^2 | x <- [1..n]]

2. Define length, which returns the number of elements in a list, using foldr. Redefine it using foldl.

> length' xs = foldl (\acc a -> acc + (a `div` a)) 0 xs
> length'' xs = foldr (\a acc -> acc + (a `div` a)) 0 xs

3. Define minlist, which returns the smallest integer in a non-empty list of integers, using foldr1 . Redefine it using foldl1.

> minlist xs = foldr1 min xs
> minlist' xs = foldl1 min xs

4. Define reverse, which reverses a list, using foldr.

> reverse' xs = foldl (\acc x-> x : acc) [] xs
> reverse'' xs = foldr (\x acc -> acc ++ [x]) [] xs

5. Using foldr , define a function remove which takes two strings as its arguments and removes every letter from the second list that occurs in the first list. For example, remove "first" "second" = "econd".

6. Define filter using foldr . Define filter again using foldl.

7. The function remdups removes adjacent duplicates from a list. For example,

remdups [1, 2, 2, 3, 3, 3, 1, 1] = [1, 2, 3, 1].

Define remdups using foldr . Give another definition using foldl.

;;;;;;;;;;;;;;;;;;;
List comprehensions
;;;;;;;;;;;;;;;;;;;

1. Show the lists generated by:

> l1 = [n*n | n<-[1..10], even n]


> l2 = [ 7 | n <- [1..4]]


> l3 = [(x,y) | x <-[1..3], y<-[4..7]]


> l4 = [(m,n) | m <-[1..3], n<-[1..m]]


> l5 = [j | i<-[1,-1,2,-2], i>0, j<-[1..i]]


> l6 = [a+b | (a,b) <-[(1,2), (3,4), (5,6)]]

2. Use a list comprehension to define a function neglist xs that computes the number of negative elements in a list.

3. Use a list comprehension to define a function gensquares low high that generates a list of squares of all the even numbers from low to hgh inclusive.
